"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/d3-delaunay";
exports.ids = ["vendor-chunks/d3-delaunay"];
exports.modules = {

/***/ "(ssr)/../node_modules/d3-delaunay/src/delaunay.js":
/*!***************************************************!*\
  !*** ../node_modules/d3-delaunay/src/delaunay.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Delaunay)\n/* harmony export */ });\n/* harmony import */ var delaunator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! delaunator */ \"(ssr)/../node_modules/delaunator/index.js\");\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path.js */ \"(ssr)/../node_modules/d3-delaunay/src/path.js\");\n/* harmony import */ var _polygon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polygon.js */ \"(ssr)/../node_modules/d3-delaunay/src/polygon.js\");\n/* harmony import */ var _voronoi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./voronoi.js */ \"(ssr)/../node_modules/d3-delaunay/src/voronoi.js\");\n\n\n\n\nconst tau = 2 * Math.PI, pow = Math.pow;\nfunction pointX(p) {\n    return p[0];\n}\nfunction pointY(p) {\n    return p[1];\n}\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n    const { triangles, coords } = d;\n    for(let i = 0; i < triangles.length; i += 3){\n        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n        if (cross > 1e-10) return false;\n    }\n    return true;\n}\nfunction jitter(x, y, r) {\n    return [\n        x + Math.sin(x + y) * r,\n        y + Math.cos(x - y) * r\n    ];\n}\nclass Delaunay {\n    static from(points, fx = pointX, fy = pointY, that) {\n        return new Delaunay(\"length\" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));\n    }\n    constructor(points){\n        this._delaunator = new delaunator__WEBPACK_IMPORTED_MODULE_0__[\"default\"](points);\n        this.inedges = new Int32Array(points.length / 2);\n        this._hullIndex = new Int32Array(points.length / 2);\n        this.points = this._delaunator.coords;\n        this._init();\n    }\n    update() {\n        this._delaunator.update();\n        this._init();\n        return this;\n    }\n    _init() {\n        const d = this._delaunator, points = this.points;\n        // check for collinear\n        if (d.hull && d.hull.length > 2 && collinear(d)) {\n            this.collinear = Int32Array.from({\n                length: points.length / 2\n            }, (_, i)=>i).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [\n                points[2 * e],\n                points[2 * e + 1],\n                points[2 * f],\n                points[2 * f + 1]\n            ], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n            for(let i = 0, n = points.length / 2; i < n; ++i){\n                const p = jitter(points[2 * i], points[2 * i + 1], r);\n                points[2 * i] = p[0];\n                points[2 * i + 1] = p[1];\n            }\n            this._delaunator = new delaunator__WEBPACK_IMPORTED_MODULE_0__[\"default\"](points);\n        } else {\n            delete this.collinear;\n        }\n        const halfedges = this.halfedges = this._delaunator.halfedges;\n        const hull = this.hull = this._delaunator.hull;\n        const triangles = this.triangles = this._delaunator.triangles;\n        const inedges = this.inedges.fill(-1);\n        const hullIndex = this._hullIndex.fill(-1);\n        // Compute an index from each point to an (arbitrary) incoming halfedge\n        // Used to give the first neighbor of each point; for this reason,\n        // on the hull we give priority to exterior halfedges\n        for(let e = 0, n = halfedges.length; e < n; ++e){\n            const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n            if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n        }\n        for(let i = 0, n = hull.length; i < n; ++i){\n            hullIndex[hull[i]] = i;\n        }\n        // degenerate case: 1 or 2 (distinct) points\n        if (hull.length <= 2 && hull.length > 0) {\n            this.triangles = new Int32Array(3).fill(-1);\n            this.halfedges = new Int32Array(3).fill(-1);\n            this.triangles[0] = hull[0];\n            inedges[hull[0]] = 1;\n            if (hull.length === 2) {\n                inedges[hull[1]] = 0;\n                this.triangles[1] = hull[1];\n                this.triangles[2] = hull[1];\n            }\n        }\n    }\n    voronoi(bounds) {\n        return new _voronoi_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, bounds);\n    }\n    *neighbors(i) {\n        const { inedges, hull, _hullIndex, halfedges, triangles, collinear } = this;\n        // degenerate case with several collinear points\n        if (collinear) {\n            const l = collinear.indexOf(i);\n            if (l > 0) yield collinear[l - 1];\n            if (l < collinear.length - 1) yield collinear[l + 1];\n            return;\n        }\n        const e0 = inedges[i];\n        if (e0 === -1) return; // coincident point\n        let e = e0, p0 = -1;\n        do {\n            yield p0 = triangles[e];\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) return; // bad triangulation\n            e = halfedges[e];\n            if (e === -1) {\n                const p = hull[(_hullIndex[i] + 1) % hull.length];\n                if (p !== p0) yield p;\n                return;\n            }\n        }while (e !== e0);\n    }\n    find(x, y, i = 0) {\n        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n        const i0 = i;\n        let c;\n        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;\n        return c;\n    }\n    _step(i, x, y) {\n        const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;\n        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n        let c = i;\n        let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n        const e0 = inedges[i];\n        let e = e0;\n        do {\n            let t = triangles[e];\n            const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n            if (dt < dc) dc = dt, c = t;\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) break; // bad triangulation\n            e = halfedges[e];\n            if (e === -1) {\n                e = hull[(_hullIndex[i] + 1) % hull.length];\n                if (e !== t) {\n                    if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n                }\n                break;\n            }\n        }while (e !== e0);\n        return c;\n    }\n    render(context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : undefined;\n        const { points, halfedges, triangles } = this;\n        for(let i = 0, n = halfedges.length; i < n; ++i){\n            const j = halfedges[i];\n            if (j < i) continue;\n            const ti = triangles[i] * 2;\n            const tj = triangles[j] * 2;\n            context.moveTo(points[ti], points[ti + 1]);\n            context.lineTo(points[tj], points[tj + 1]);\n        }\n        this.renderHull(context);\n        return buffer && buffer.value();\n    }\n    renderPoints(context, r) {\n        if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n        r = r == undefined ? 2 : +r;\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : undefined;\n        const { points } = this;\n        for(let i = 0, n = points.length; i < n; i += 2){\n            const x = points[i], y = points[i + 1];\n            context.moveTo(x + r, y);\n            context.arc(x, y, r, 0, tau);\n        }\n        return buffer && buffer.value();\n    }\n    renderHull(context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : undefined;\n        const { hull, points } = this;\n        const h = hull[0] * 2, n = hull.length;\n        context.moveTo(points[h], points[h + 1]);\n        for(let i = 1; i < n; ++i){\n            const h = 2 * hull[i];\n            context.lineTo(points[h], points[h + 1]);\n        }\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    hullPolygon() {\n        const polygon = new _polygon_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        this.renderHull(polygon);\n        return polygon.value();\n    }\n    renderTriangle(i, context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : undefined;\n        const { points, triangles } = this;\n        const t0 = triangles[i *= 3] * 2;\n        const t1 = triangles[i + 1] * 2;\n        const t2 = triangles[i + 2] * 2;\n        context.moveTo(points[t0], points[t0 + 1]);\n        context.lineTo(points[t1], points[t1 + 1]);\n        context.lineTo(points[t2], points[t2 + 1]);\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    *trianglePolygons() {\n        const { triangles } = this;\n        for(let i = 0, n = triangles.length / 3; i < n; ++i){\n            yield this.trianglePolygon(i);\n        }\n    }\n    trianglePolygon(i) {\n        const polygon = new _polygon_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        this.renderTriangle(i, polygon);\n        return polygon.value();\n    }\n}\nfunction flatArray(points, fx, fy, that) {\n    const n = points.length;\n    const array = new Float64Array(n * 2);\n    for(let i = 0; i < n; ++i){\n        const p = points[i];\n        array[i * 2] = fx.call(that, p, i, points);\n        array[i * 2 + 1] = fy.call(that, p, i, points);\n    }\n    return array;\n}\nfunction* flatIterable(points, fx, fy, that) {\n    let i = 0;\n    for (const p of points){\n        yield fx.call(that, p, i, points);\n        yield fy.call(that, p, i, points);\n        ++i;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/d3-delaunay/src/delaunay.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/d3-delaunay/src/index.js":
/*!************************************************!*\
  !*** ../node_modules/d3-delaunay/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Delaunay: () => (/* reexport safe */ _delaunay_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   Voronoi: () => (/* reexport safe */ _voronoi_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _delaunay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delaunay.js */ \"(ssr)/../node_modules/d3-delaunay/src/delaunay.js\");\n/* harmony import */ var _voronoi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./voronoi.js */ \"(ssr)/../node_modules/d3-delaunay/src/voronoi.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2QzLWRlbGF1bmF5L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYXNhLXNwYWNlLWJpb2xvZ3ktZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2QzLWRlbGF1bmF5L3NyYy9pbmRleC5qcz8yMDk1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7ZGVmYXVsdCBhcyBEZWxhdW5heX0gZnJvbSBcIi4vZGVsYXVuYXkuanNcIjtcclxuZXhwb3J0IHtkZWZhdWx0IGFzIFZvcm9ub2l9IGZyb20gXCIuL3Zvcm9ub2kuanNcIjtcclxuIl0sIm5hbWVzIjpbImRlZmF1bHQiLCJEZWxhdW5heSIsIlZvcm9ub2kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/d3-delaunay/src/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/d3-delaunay/src/path.js":
/*!***********************************************!*\
  !*** ../node_modules/d3-delaunay/src/path.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Path)\n/* harmony export */ });\nconst epsilon = 1e-6;\nclass Path {\n    constructor(){\n        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath\n        this._ = \"\";\n    }\n    moveTo(x, y) {\n        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n    }\n    closePath() {\n        if (this._x1 !== null) {\n            this._x1 = this._x0, this._y1 = this._y0;\n            this._ += \"Z\";\n        }\n    }\n    lineTo(x, y) {\n        this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n    }\n    arc(x, y, r) {\n        x = +x, y = +y, r = +r;\n        const x0 = x + r;\n        const y0 = y;\n        if (r < 0) throw new Error(\"negative radius\");\n        if (this._x1 === null) this._ += `M${x0},${y0}`;\n        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n        if (!r) return;\n        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n    }\n    rect(x, y, w, h) {\n        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n    }\n    value() {\n        return this._ || null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2QzLWRlbGF1bmF5L3NyYy9wYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxVQUFVO0FBRUQsTUFBTUM7SUFDbkJDLGFBQWM7UUFDWixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJLENBQUNDLEdBQUcsR0FDbkIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEdBQUcsTUFBTSx5QkFBeUI7UUFDckQsSUFBSSxDQUFDQyxDQUFDLEdBQUc7SUFDWDtJQUNBQyxPQUFPQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNYLElBQUksQ0FBQ0gsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0osR0FBRyxHQUFHLElBQUksQ0FBQ0UsR0FBRyxHQUFHLENBQUNJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQ0UsR0FBRyxHQUFHLENBQUNJLEVBQUUsQ0FBQztJQUN0RTtJQUNBQyxZQUFZO1FBQ1YsSUFBSSxJQUFJLENBQUNOLEdBQUcsS0FBSyxNQUFNO1lBQ3JCLElBQUksQ0FBQ0EsR0FBRyxHQUFHLElBQUksQ0FBQ0YsR0FBRyxFQUFFLElBQUksQ0FBQ0csR0FBRyxHQUFHLElBQUksQ0FBQ0YsR0FBRztZQUN4QyxJQUFJLENBQUNHLENBQUMsSUFBSTtRQUNaO0lBQ0Y7SUFDQUssT0FBT0gsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDWCxJQUFJLENBQUNILENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNGLEdBQUcsR0FBRyxDQUFDSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUNILEdBQUcsR0FBRyxDQUFDSSxFQUFFLENBQUM7SUFDaEQ7SUFDQUcsSUFBSUosQ0FBQyxFQUFFQyxDQUFDLEVBQUVJLENBQUMsRUFBRTtRQUNYTCxJQUFJLENBQUNBLEdBQUdDLElBQUksQ0FBQ0EsR0FBR0ksSUFBSSxDQUFDQTtRQUNyQixNQUFNQyxLQUFLTixJQUFJSztRQUNmLE1BQU1FLEtBQUtOO1FBQ1gsSUFBSUksSUFBSSxHQUFHLE1BQU0sSUFBSUcsTUFBTTtRQUMzQixJQUFJLElBQUksQ0FBQ1osR0FBRyxLQUFLLE1BQU0sSUFBSSxDQUFDRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVRLEdBQUcsQ0FBQyxFQUFFQyxHQUFHLENBQUM7YUFDMUMsSUFBSUUsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ2QsR0FBRyxHQUFHVSxNQUFNZixXQUFXa0IsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ2IsR0FBRyxHQUFHVSxNQUFNaEIsU0FBUyxJQUFJLENBQUNPLENBQUMsSUFBSSxNQUFNUSxLQUFLLE1BQU1DO1FBQzVHLElBQUksQ0FBQ0YsR0FBRztRQUNSLElBQUksQ0FBQ1AsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFTyxFQUFFLENBQUMsRUFBRUEsRUFBRSxPQUFPLEVBQUVMLElBQUlLLEVBQUUsQ0FBQyxFQUFFSixFQUFFLENBQUMsRUFBRUksRUFBRSxDQUFDLEVBQUVBLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQ1QsR0FBRyxHQUFHVSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNULEdBQUcsR0FBR1UsR0FBRyxDQUFDO0lBQzlGO0lBQ0FJLEtBQUtYLENBQUMsRUFBRUMsQ0FBQyxFQUFFVyxDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNmLElBQUksQ0FBQ2YsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0osR0FBRyxHQUFHLElBQUksQ0FBQ0UsR0FBRyxHQUFHLENBQUNJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQ0UsR0FBRyxHQUFHLENBQUNJLEVBQUUsQ0FBQyxFQUFFLENBQUNXLEVBQUUsQ0FBQyxFQUFFLENBQUNDLEVBQUUsQ0FBQyxFQUFFLENBQUNELEVBQUUsQ0FBQyxDQUFDO0lBQ3pGO0lBQ0FFLFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQ2hCLENBQUMsSUFBSTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmFzYS1zcGFjZS1iaW9sb2d5LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9kMy1kZWxhdW5heS9zcmMvcGF0aC5qcz84NDE4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVwc2lsb24gPSAxZS02O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXHJcbiAgICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxyXG4gICAgdGhpcy5fID0gXCJcIjtcclxuICB9XHJcbiAgbW92ZVRvKHgsIHkpIHtcclxuICAgIHRoaXMuXyArPSBgTSR7dGhpcy5feDAgPSB0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kwID0gdGhpcy5feTEgPSAreX1gO1xyXG4gIH1cclxuICBjbG9zZVBhdGgoKSB7XHJcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcclxuICAgICAgdGhpcy5fICs9IFwiWlwiO1xyXG4gICAgfVxyXG4gIH1cclxuICBsaW5lVG8oeCwgeSkge1xyXG4gICAgdGhpcy5fICs9IGBMJHt0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kxID0gK3l9YDtcclxuICB9XHJcbiAgYXJjKHgsIHksIHIpIHtcclxuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XHJcbiAgICBjb25zdCB4MCA9IHggKyByO1xyXG4gICAgY29uc3QgeTAgPSB5O1xyXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXNcIik7XHJcbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHRoaXMuXyArPSBgTSR7eDB9LCR7eTB9YDtcclxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcclxuICAgIGlmICghcikgcmV0dXJuO1xyXG4gICAgdGhpcy5fICs9IGBBJHtyfSwke3J9LDAsMSwxLCR7eCAtIHJ9LCR7eX1BJHtyfSwke3J9LDAsMSwxLCR7dGhpcy5feDEgPSB4MH0sJHt0aGlzLl95MSA9IHkwfWA7XHJcbiAgfVxyXG4gIHJlY3QoeCwgeSwgdywgaCkge1xyXG4gICAgdGhpcy5fICs9IGBNJHt0aGlzLl94MCA9IHRoaXMuX3gxID0gK3h9LCR7dGhpcy5feTAgPSB0aGlzLl95MSA9ICt5fWgkeyt3fXYkeytofWgkey13fVpgO1xyXG4gIH1cclxuICB2YWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl8gfHwgbnVsbDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImVwc2lsb24iLCJQYXRoIiwiY29uc3RydWN0b3IiLCJfeDAiLCJfeTAiLCJfeDEiLCJfeTEiLCJfIiwibW92ZVRvIiwieCIsInkiLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJhcmMiLCJyIiwieDAiLCJ5MCIsIkVycm9yIiwiTWF0aCIsImFicyIsInJlY3QiLCJ3IiwiaCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/d3-delaunay/src/path.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/d3-delaunay/src/polygon.js":
/*!**************************************************!*\
  !*** ../node_modules/d3-delaunay/src/polygon.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Polygon)\n/* harmony export */ });\nclass Polygon {\n    constructor(){\n        this._ = [];\n    }\n    moveTo(x, y) {\n        this._.push([\n            x,\n            y\n        ]);\n    }\n    closePath() {\n        this._.push(this._[0].slice());\n    }\n    lineTo(x, y) {\n        this._.push([\n            x,\n            y\n        ]);\n    }\n    value() {\n        return this._.length ? this._ : null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2QzLWRlbGF1bmF5L3NyYy9wb2x5Z29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxNQUFNQTtJQUNuQkMsYUFBYztRQUNaLElBQUksQ0FBQ0MsQ0FBQyxHQUFHLEVBQUU7SUFDYjtJQUNBQyxPQUFPQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNYLElBQUksQ0FBQ0gsQ0FBQyxDQUFDSSxJQUFJLENBQUM7WUFBQ0Y7WUFBR0M7U0FBRTtJQUNwQjtJQUNBRSxZQUFZO1FBQ1YsSUFBSSxDQUFDTCxDQUFDLENBQUNJLElBQUksQ0FBQyxJQUFJLENBQUNKLENBQUMsQ0FBQyxFQUFFLENBQUNNLEtBQUs7SUFDN0I7SUFDQUMsT0FBT0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDWCxJQUFJLENBQUNILENBQUMsQ0FBQ0ksSUFBSSxDQUFDO1lBQUNGO1lBQUdDO1NBQUU7SUFDcEI7SUFDQUssUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDUixDQUFDLENBQUNTLE1BQU0sR0FBRyxJQUFJLENBQUNULENBQUMsR0FBRztJQUNsQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmFzYS1zcGFjZS1iaW9sb2d5LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9kMy1kZWxhdW5heS9zcmMvcG9seWdvbi5qcz80MDIyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlnb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fID0gW107XHJcbiAgfVxyXG4gIG1vdmVUbyh4LCB5KSB7XHJcbiAgICB0aGlzLl8ucHVzaChbeCwgeV0pO1xyXG4gIH1cclxuICBjbG9zZVBhdGgoKSB7XHJcbiAgICB0aGlzLl8ucHVzaCh0aGlzLl9bMF0uc2xpY2UoKSk7XHJcbiAgfVxyXG4gIGxpbmVUbyh4LCB5KSB7XHJcbiAgICB0aGlzLl8ucHVzaChbeCwgeV0pO1xyXG4gIH1cclxuICB2YWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl8ubGVuZ3RoID8gdGhpcy5fIDogbnVsbDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIlBvbHlnb24iLCJjb25zdHJ1Y3RvciIsIl8iLCJtb3ZlVG8iLCJ4IiwieSIsInB1c2giLCJjbG9zZVBhdGgiLCJzbGljZSIsImxpbmVUbyIsInZhbHVlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/d3-delaunay/src/polygon.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/d3-delaunay/src/voronoi.js":
/*!**************************************************!*\
  !*** ../node_modules/d3-delaunay/src/voronoi.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Voronoi)\n/* harmony export */ });\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ \"(ssr)/../node_modules/d3-delaunay/src/path.js\");\n/* harmony import */ var _polygon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polygon.js */ \"(ssr)/../node_modules/d3-delaunay/src/polygon.js\");\n\n\nclass Voronoi {\n    constructor(delaunay, [xmin, ymin, xmax, ymax] = [\n        0,\n        0,\n        960,\n        500\n    ]){\n        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n        this.delaunay = delaunay;\n        this._circumcenters = new Float64Array(delaunay.points.length * 2);\n        this.vectors = new Float64Array(delaunay.points.length * 2);\n        this.xmax = xmax, this.xmin = xmin;\n        this.ymax = ymax, this.ymin = ymin;\n        this._init();\n    }\n    update() {\n        this.delaunay.update();\n        this._init();\n        return this;\n    }\n    _init() {\n        const { delaunay: { points, hull, triangles }, vectors } = this;\n        let bx, by; // lazily computed barycenter of the hull\n        // Compute circumcenters.\n        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){\n            const t1 = triangles[i] * 2;\n            const t2 = triangles[i + 1] * 2;\n            const t3 = triangles[i + 2] * 2;\n            const x1 = points[t1];\n            const y1 = points[t1 + 1];\n            const x2 = points[t2];\n            const y2 = points[t2 + 1];\n            const x3 = points[t3];\n            const y3 = points[t3 + 1];\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            const ex = x3 - x1;\n            const ey = y3 - y1;\n            const ab = (dx * ey - dy * ex) * 2;\n            if (Math.abs(ab) < 1e-9) {\n                // For a degenerate triangle, the circumcenter is at the infinity, in a\n                // direction orthogonal to the halfedge and away from the “center” of\n                // the diagram <bx, by>, defined as the hull’s barycenter.\n                if (bx === undefined) {\n                    bx = by = 0;\n                    for (const i of hull)bx += points[i * 2], by += points[i * 2 + 1];\n                    bx /= hull.length, by /= hull.length;\n                }\n                const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);\n                x = (x1 + x3) / 2 - a * ey;\n                y = (y1 + y3) / 2 + a * ex;\n            } else {\n                const d = 1 / ab;\n                const bl = dx * dx + dy * dy;\n                const cl = ex * ex + ey * ey;\n                x = x1 + (ey * bl - dy * cl) * d;\n                y = y1 + (dx * cl - ex * bl) * d;\n            }\n            circumcenters[j] = x;\n            circumcenters[j + 1] = y;\n        }\n        // Compute exterior cell rays.\n        let h = hull[hull.length - 1];\n        let p0, p1 = h * 4;\n        let x0, x1 = points[2 * h];\n        let y0, y1 = points[2 * h + 1];\n        vectors.fill(0);\n        for(let i = 0; i < hull.length; ++i){\n            h = hull[i];\n            p0 = p1, x0 = x1, y0 = y1;\n            p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n            vectors[p0 + 2] = vectors[p1] = y0 - y1;\n            vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n        }\n    }\n    render(context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : undefined;\n        const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;\n        if (hull.length <= 1) return null;\n        for(let i = 0, n = halfedges.length; i < n; ++i){\n            const j = halfedges[i];\n            if (j < i) continue;\n            const ti = Math.floor(i / 3) * 2;\n            const tj = Math.floor(j / 3) * 2;\n            const xi = circumcenters[ti];\n            const yi = circumcenters[ti + 1];\n            const xj = circumcenters[tj];\n            const yj = circumcenters[tj + 1];\n            this._renderSegment(xi, yi, xj, yj, context);\n        }\n        let h0, h1 = hull[hull.length - 1];\n        for(let i = 0; i < hull.length; ++i){\n            h0 = h1, h1 = hull[i];\n            const t = Math.floor(inedges[h1] / 3) * 2;\n            const x = circumcenters[t];\n            const y = circumcenters[t + 1];\n            const v = h0 * 4;\n            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n            if (p) this._renderSegment(x, y, p[0], p[1], context);\n        }\n        return buffer && buffer.value();\n    }\n    renderBounds(context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : undefined;\n        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n        return buffer && buffer.value();\n    }\n    renderCell(i, context) {\n        const buffer = context == null ? context = new _path_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : undefined;\n        const points = this._clip(i);\n        if (points === null || !points.length) return;\n        context.moveTo(points[0], points[1]);\n        let n = points.length;\n        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;\n        for(let i = 2; i < n; i += 2){\n            if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);\n        }\n        context.closePath();\n        return buffer && buffer.value();\n    }\n    *cellPolygons() {\n        const { delaunay: { points } } = this;\n        for(let i = 0, n = points.length / 2; i < n; ++i){\n            const cell = this.cellPolygon(i);\n            if (cell) cell.index = i, yield cell;\n        }\n    }\n    cellPolygon(i) {\n        const polygon = new _polygon_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        this.renderCell(i, polygon);\n        return polygon.value();\n    }\n    _renderSegment(x0, y0, x1, y1, context) {\n        let S;\n        const c0 = this._regioncode(x0, y0);\n        const c1 = this._regioncode(x1, y1);\n        if (c0 === 0 && c1 === 0) {\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n            context.moveTo(S[0], S[1]);\n            context.lineTo(S[2], S[3]);\n        }\n    }\n    contains(i, x, y) {\n        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n        return this.delaunay._step(i, x, y) === i;\n    }\n    *neighbors(i) {\n        const ci = this._clip(i);\n        if (ci) for (const j of this.delaunay.neighbors(i)){\n            const cj = this._clip(j);\n            // find the common edge\n            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){\n                for(let aj = 0, lj = cj.length; aj < lj; aj += 2){\n                    if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {\n                        yield j;\n                        break loop;\n                    }\n                }\n            }\n        }\n    }\n    _cell(i) {\n        const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;\n        const e0 = inedges[i];\n        if (e0 === -1) return null; // coincident point\n        const points = [];\n        let e = e0;\n        do {\n            const t = Math.floor(e / 3);\n            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n            e = e % 3 === 2 ? e - 2 : e + 1;\n            if (triangles[e] !== i) break; // bad triangulation\n            e = halfedges[e];\n        }while (e !== e0 && e !== -1);\n        return points;\n    }\n    _clip(i) {\n        // degenerate case (1 valid point: return the box)\n        if (i === 0 && this.delaunay.hull.length === 1) {\n            return [\n                this.xmax,\n                this.ymin,\n                this.xmax,\n                this.ymax,\n                this.xmin,\n                this.ymax,\n                this.xmin,\n                this.ymin\n            ];\n        }\n        const points = this._cell(i);\n        if (points === null) return null;\n        const { vectors: V } = this;\n        const v = i * 4;\n        return this._simplify(V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points));\n    }\n    _clipFinite(i, points) {\n        const n = points.length;\n        let P = null;\n        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n        let c0, c1 = this._regioncode(x1, y1);\n        let e0, e1 = 0;\n        for(let j = 0; j < n; j += 2){\n            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n            c0 = c1, c1 = this._regioncode(x1, y1);\n            if (c0 === 0 && c1 === 0) {\n                e0 = e1, e1 = 0;\n                if (P) P.push(x1, y1);\n                else P = [\n                    x1,\n                    y1\n                ];\n            } else {\n                let S, sx0, sy0, sx1, sy1;\n                if (c0 === 0) {\n                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n                    [sx0, sy0, sx1, sy1] = S;\n                } else {\n                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n                    [sx1, sy1, sx0, sy0] = S;\n                    e0 = e1, e1 = this._edgecode(sx0, sy0);\n                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n                    if (P) P.push(sx0, sy0);\n                    else P = [\n                        sx0,\n                        sy0\n                    ];\n                }\n                e0 = e1, e1 = this._edgecode(sx1, sy1);\n                if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n                if (P) P.push(sx1, sy1);\n                else P = [\n                    sx1,\n                    sy1\n                ];\n            }\n        }\n        if (P) {\n            e0 = e1, e1 = this._edgecode(P[0], P[1]);\n            if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n            return [\n                this.xmax,\n                this.ymin,\n                this.xmax,\n                this.ymax,\n                this.xmin,\n                this.ymax,\n                this.xmin,\n                this.ymin\n            ];\n        }\n        return P;\n    }\n    _clipSegment(x0, y0, x1, y1, c0, c1) {\n        // for more robustness, always consider the segment in the same order\n        const flip = c0 < c1;\n        if (flip) [x0, y0, x1, y1, c0, c1] = [\n            x1,\n            y1,\n            x0,\n            y0,\n            c1,\n            c0\n        ];\n        while(true){\n            if (c0 === 0 && c1 === 0) return flip ? [\n                x1,\n                y1,\n                x0,\n                y0\n            ] : [\n                x0,\n                y0,\n                x1,\n                y1\n            ];\n            if (c0 & c1) return null;\n            let x, y, c = c0 || c1;\n            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n        }\n    }\n    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n        let P = Array.from(points), p;\n        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n        if (P = this._clipFinite(i, P)) {\n            for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){\n                c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n                if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n            }\n        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n            P = [\n                this.xmin,\n                this.ymin,\n                this.xmax,\n                this.ymin,\n                this.xmax,\n                this.ymax,\n                this.xmin,\n                this.ymax\n            ];\n        }\n        return P;\n    }\n    _edge(i, e0, e1, P, j) {\n        while(e0 !== e1){\n            let x, y;\n            switch(e0){\n                case 5:\n                    e0 = 4;\n                    continue; // top-left\n                case 4:\n                    e0 = 6, x = this.xmax, y = this.ymin;\n                    break; // top\n                case 6:\n                    e0 = 2;\n                    continue; // top-right\n                case 2:\n                    e0 = 10, x = this.xmax, y = this.ymax;\n                    break; // right\n                case 10:\n                    e0 = 8;\n                    continue; // bottom-right\n                case 8:\n                    e0 = 9, x = this.xmin, y = this.ymax;\n                    break; // bottom\n                case 9:\n                    e0 = 1;\n                    continue; // bottom-left\n                case 1:\n                    e0 = 5, x = this.xmin, y = this.ymin;\n                    break; // left\n            }\n            // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n            // undefined, the conditional statement will be executed.\n            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n                P.splice(j, 0, x, y), j += 2;\n            }\n        }\n        return j;\n    }\n    _project(x0, y0, vx, vy) {\n        let t = Infinity, c, x, y;\n        if (vy < 0) {\n            if (y0 <= this.ymin) return null;\n            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n        } else if (vy > 0) {\n            if (y0 >= this.ymax) return null;\n            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n        }\n        if (vx > 0) {\n            if (x0 >= this.xmax) return null;\n            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n        } else if (vx < 0) {\n            if (x0 <= this.xmin) return null;\n            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n        }\n        return [\n            x,\n            y\n        ];\n    }\n    _edgecode(x, y) {\n        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);\n    }\n    _regioncode(x, y) {\n        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);\n    }\n    _simplify(P) {\n        if (P && P.length > 4) {\n            for(let i = 0; i < P.length; i += 2){\n                const j = (i + 2) % P.length, k = (i + 4) % P.length;\n                if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {\n                    P.splice(j, 2), i -= 2;\n                }\n            }\n            if (!P.length) P = null;\n        }\n        return P;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/d3-delaunay/src/voronoi.js\n");

/***/ })

};
;