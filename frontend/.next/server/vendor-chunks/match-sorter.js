"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/match-sorter";
exports.ids = ["vendor-chunks/match-sorter"];
exports.modules = {

/***/ "(ssr)/../node_modules/match-sorter/dist/match-sorter.esm.js":
/*!*************************************************************!*\
  !*** ../node_modules/match-sorter/dist/match-sorter.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultBaseSortFn: () => (/* binding */ defaultBaseSortFn),\n/* harmony export */   matchSorter: () => (/* binding */ matchSorter),\n/* harmony export */   rankings: () => (/* binding */ rankings)\n/* harmony export */ });\n/* harmony import */ var remove_accents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! remove-accents */ \"(ssr)/../node_modules/remove-accents/index.js\");\n/* harmony import */ var remove_accents__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(remove_accents__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * @name match-sorter\r\n * @license MIT license.\r\n * @copyright (c) 2020 Kent C. Dodds\r\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\r\n */ const rankings = {\n    CASE_SENSITIVE_EQUAL: 7,\n    EQUAL: 6,\n    STARTS_WITH: 5,\n    WORD_STARTS_WITH: 4,\n    CONTAINS: 3,\n    ACRONYM: 2,\n    MATCHES: 1,\n    NO_MATCH: 0\n};\nconst defaultBaseSortFn = (a, b)=>String(a.rankedValue).localeCompare(String(b.rankedValue));\n/**\r\n * Takes an array of items and a value and returns a new array with the items that match the given value\r\n * @param {Array} items - the items to sort\r\n * @param {String} value - the value to use for ranking\r\n * @param {Object} options - Some options to configure the sorter\r\n * @return {Array} - the new sorted array\r\n */ function matchSorter(items, value, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { keys, threshold = rankings.MATCHES, baseSort = defaultBaseSortFn, sorter = (matchedItems)=>matchedItems.sort((a, b)=>sortRankedValues(a, b, baseSort)) } = options;\n    const matchedItems = items.reduce(reduceItemsToRanked, []);\n    return sorter(matchedItems).map((_ref)=>{\n        let { item } = _ref;\n        return item;\n    });\n    function reduceItemsToRanked(matches, item, index) {\n        const rankingInfo = getHighestRanking(item, keys, value, options);\n        const { rank, keyThreshold = threshold } = rankingInfo;\n        if (rank >= keyThreshold) {\n            matches.push({\n                ...rankingInfo,\n                item,\n                index\n            });\n        }\n        return matches;\n    }\n}\nmatchSorter.rankings = rankings;\n/**\r\n * Gets the highest ranking for value for the given item based on its values for the given keys\r\n * @param {*} item - the item to rank\r\n * @param {Array} keys - the keys to get values from the item for the ranking\r\n * @param {String} value - the value to rank against\r\n * @param {Object} options - options to control the ranking\r\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\r\n */ function getHighestRanking(item, keys, value, options) {\n    if (!keys) {\n        // if keys is not specified, then we assume the item given is ready to be matched\n        const stringItem = item;\n        return {\n            // ends up being duplicate of 'item' in matches but consistent\n            rankedValue: stringItem,\n            rank: getMatchRanking(stringItem, value, options),\n            keyIndex: -1,\n            keyThreshold: options.threshold\n        };\n    }\n    const valuesToRank = getAllValuesToRank(item, keys);\n    return valuesToRank.reduce((_ref2, _ref3, i)=>{\n        let { rank, rankedValue, keyIndex, keyThreshold } = _ref2;\n        let { itemValue, attributes } = _ref3;\n        let newRank = getMatchRanking(itemValue, value, options);\n        let newRankedValue = rankedValue;\n        const { minRanking, maxRanking, threshold } = attributes;\n        if (newRank < minRanking && newRank >= rankings.MATCHES) {\n            newRank = minRanking;\n        } else if (newRank > maxRanking) {\n            newRank = maxRanking;\n        }\n        if (newRank > rank) {\n            rank = newRank;\n            keyIndex = i;\n            keyThreshold = threshold;\n            newRankedValue = itemValue;\n        }\n        return {\n            rankedValue: newRankedValue,\n            rank,\n            keyIndex,\n            keyThreshold\n        };\n    }, {\n        rankedValue: item,\n        rank: rankings.NO_MATCH,\n        keyIndex: -1,\n        keyThreshold: options.threshold\n    });\n}\n/**\r\n * Gives a rankings score based on how well the two strings match.\r\n * @param {String} testString - the string to test against\r\n * @param {String} stringToRank - the string to rank\r\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\r\n * @returns {Number} the ranking for how well stringToRank matches testString\r\n */ function getMatchRanking(testString, stringToRank, options) {\n    testString = prepareValueForComparison(testString, options);\n    stringToRank = prepareValueForComparison(stringToRank, options);\n    // too long\n    if (stringToRank.length > testString.length) {\n        return rankings.NO_MATCH;\n    }\n    // case sensitive equals\n    if (testString === stringToRank) {\n        return rankings.CASE_SENSITIVE_EQUAL;\n    }\n    // Lower casing before further comparison\n    testString = testString.toLowerCase();\n    stringToRank = stringToRank.toLowerCase();\n    // case insensitive equals\n    if (testString === stringToRank) {\n        return rankings.EQUAL;\n    }\n    // starts with\n    if (testString.startsWith(stringToRank)) {\n        return rankings.STARTS_WITH;\n    }\n    // word starts with\n    if (testString.includes(` ${stringToRank}`)) {\n        return rankings.WORD_STARTS_WITH;\n    }\n    // contains\n    if (testString.includes(stringToRank)) {\n        return rankings.CONTAINS;\n    } else if (stringToRank.length === 1) {\n        // If the only character in the given stringToRank\n        //   isn't even contained in the testString, then\n        //   it's definitely not a match.\n        return rankings.NO_MATCH;\n    }\n    // acronym\n    if (getAcronym(testString).includes(stringToRank)) {\n        return rankings.ACRONYM;\n    }\n    // will return a number between rankings.MATCHES and\n    // rankings.MATCHES + 1 depending  on how close of a match it is.\n    return getClosenessRanking(testString, stringToRank);\n}\n/**\r\n * Generates an acronym for a string.\r\n *\r\n * @param {String} string the string for which to produce the acronym\r\n * @returns {String} the acronym\r\n */ function getAcronym(string) {\n    let acronym = \"\";\n    const wordsInString = string.split(\" \");\n    wordsInString.forEach((wordInString)=>{\n        const splitByHyphenWords = wordInString.split(\"-\");\n        splitByHyphenWords.forEach((splitByHyphenWord)=>{\n            acronym += splitByHyphenWord.substr(0, 1);\n        });\n    });\n    return acronym;\n}\n/**\r\n * Returns a score based on how spread apart the\r\n * characters from the stringToRank are within the testString.\r\n * A number close to rankings.MATCHES represents a loose match. A number close\r\n * to rankings.MATCHES + 1 represents a tighter match.\r\n * @param {String} testString - the string to test against\r\n * @param {String} stringToRank - the string to rank\r\n * @returns {Number} the number between rankings.MATCHES and\r\n * rankings.MATCHES + 1 for how well stringToRank matches testString\r\n */ function getClosenessRanking(testString, stringToRank) {\n    let matchingInOrderCharCount = 0;\n    let charNumber = 0;\n    function findMatchingCharacter(matchChar, string, index) {\n        for(let j = index, J = string.length; j < J; j++){\n            const stringChar = string[j];\n            if (stringChar === matchChar) {\n                matchingInOrderCharCount += 1;\n                return j + 1;\n            }\n        }\n        return -1;\n    }\n    function getRanking(spread) {\n        const spreadPercentage = 1 / spread;\n        const inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n        const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n        return ranking;\n    }\n    const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n    if (firstIndex < 0) {\n        return rankings.NO_MATCH;\n    }\n    charNumber = firstIndex;\n    for(let i = 1, I = stringToRank.length; i < I; i++){\n        const matchChar = stringToRank[i];\n        charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n        const found = charNumber > -1;\n        if (!found) {\n            return rankings.NO_MATCH;\n        }\n    }\n    const spread = charNumber - firstIndex;\n    return getRanking(spread);\n}\n/**\r\n * Sorts items that have a rank, index, and keyIndex\r\n * @param {Object} a - the first item to sort\r\n * @param {Object} b - the second item to sort\r\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\r\n */ function sortRankedValues(a, b, baseSort) {\n    const aFirst = -1;\n    const bFirst = 1;\n    const { rank: aRank, keyIndex: aKeyIndex } = a;\n    const { rank: bRank, keyIndex: bKeyIndex } = b;\n    const same = aRank === bRank;\n    if (same) {\n        if (aKeyIndex === bKeyIndex) {\n            // use the base sort function as a tie-breaker\n            return baseSort(a, b);\n        } else {\n            return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n        }\n    } else {\n        return aRank > bRank ? aFirst : bFirst;\n    }\n}\n/**\r\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\r\n * @param {String} value - the value to clean\r\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\r\n * @return {String} the prepared value\r\n */ function prepareValueForComparison(value, _ref4) {\n    let { keepDiacritics } = _ref4;\n    // value might not actually be a string at this point (we don't get to choose)\n    // so part of preparing the value for comparison is ensure that it is a string\n    value = `${value}`; // toString\n    if (!keepDiacritics) {\n        value = remove_accents__WEBPACK_IMPORTED_MODULE_0___default()(value);\n    }\n    return value;\n}\n/**\r\n * Gets value for key in item at arbitrarily nested keypath\r\n * @param {Object} item - the item\r\n * @param {Object|Function} key - the potentially nested keypath or property callback\r\n * @return {Array} - an array containing the value(s) at the nested keypath\r\n */ function getItemValues(item, key) {\n    if (typeof key === \"object\") {\n        key = key.key;\n    }\n    let value;\n    if (typeof key === \"function\") {\n        value = key(item);\n    } else if (item == null) {\n        value = null;\n    } else if (Object.hasOwnProperty.call(item, key)) {\n        value = item[key];\n    } else if (key.includes(\".\")) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        return getNestedValues(key, item);\n    } else {\n        value = null;\n    }\n    // because `value` can also be undefined\n    if (value == null) {\n        return [];\n    }\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return [\n        String(value)\n    ];\n}\n/**\r\n * Given path: \"foo.bar.baz\"\r\n * And item: {foo: {bar: {baz: 'buzz'}}}\r\n *   -> 'buzz'\r\n * @param path a dot-separated set of keys\r\n * @param item the item to get the value from\r\n */ function getNestedValues(path, item) {\n    const keys = path.split(\".\");\n    let values = [\n        item\n    ];\n    for(let i = 0, I = keys.length; i < I; i++){\n        const nestedKey = keys[i];\n        let nestedValues = [];\n        for(let j = 0, J = values.length; j < J; j++){\n            const nestedItem = values[j];\n            if (nestedItem == null) continue;\n            if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n                const nestedValue = nestedItem[nestedKey];\n                if (nestedValue != null) {\n                    nestedValues.push(nestedValue);\n                }\n            } else if (nestedKey === \"*\") {\n                // ensure that values is an array\n                nestedValues = nestedValues.concat(nestedItem);\n            }\n        }\n        values = nestedValues;\n    }\n    if (Array.isArray(values[0])) {\n        // keep allowing the implicit wildcard for an array of strings at the end of\n        // the path; don't use `.flat()` because that's not available in node.js v10\n        const result = [];\n        return result.concat(...values);\n    }\n    // Based on our logic it should be an array of strings by now...\n    // assuming the user's path terminated in strings\n    return values;\n}\n/**\r\n * Gets all the values for the given keys in the given item and returns an array of those values\r\n * @param item - the item from which the values will be retrieved\r\n * @param keys - the keys to use to retrieve the values\r\n * @return objects with {itemValue, attributes}\r\n */ function getAllValuesToRank(item, keys) {\n    const allValues = [];\n    for(let j = 0, J = keys.length; j < J; j++){\n        const key = keys[j];\n        const attributes = getKeyAttributes(key);\n        const itemValues = getItemValues(item, key);\n        for(let i = 0, I = itemValues.length; i < I; i++){\n            allValues.push({\n                itemValue: itemValues[i],\n                attributes\n            });\n        }\n    }\n    return allValues;\n}\nconst defaultKeyAttributes = {\n    maxRanking: Infinity,\n    minRanking: -Infinity\n};\n/**\r\n * Gets all the attributes for the given key\r\n * @param key - the key from which the attributes will be retrieved\r\n * @return object containing the key's attributes\r\n */ function getKeyAttributes(key) {\n    if (typeof key === \"string\") {\n        return defaultKeyAttributes;\n    }\n    return {\n        ...defaultKeyAttributes,\n        ...key\n    };\n}\n/*\r\neslint\r\n  no-continue: \"off\",\r\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/match-sorter/dist/match-sorter.esm.js\n");

/***/ })

};
;